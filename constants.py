from os.path import join as path_join, abspath

API_ID: int=2210681; API_HASH: str='33755adb5ba3c296ccf0dd5220143841'
# ^ Please DO NOT use this parameters in your projects. Thanks.

VERSION: str='1.0'
VERSION_BYTE: bytes=b'\x01'   

DB_PATH: str='Tgbox'
    
BOX_IMAGE_PATH: str=path_join(
    abspath(''), 'tgbox', 'other', 'tgbox_logo.png'
)
WORDS_PATH: str=path_join(
    abspath(''), 'tgbox', 'other', 'words.txt'
)
SCRYPT_SALT: bytes = bytes.fromhex(
    '37ce65c834c6efe05dfad02413c0950072a1fe3ed48a33368333848d9c782167'
) # ^ This salt affects basekeys, you can change it to protect your RemoteBox
  #   from bruteforcing, but be sure to backup your own salt, because if you
  #   lost it, then you lost your decryption key for Boxes. This isn't necessary
  #   at all, because if you use *strong* password or generated by program Phrase, then
  #   it's already impossible to brute force. Think of it as 2FA (this doesn't help if your
  #   mainkey was leaked, but will protect you from passphrase leakage).
    
SCRYPT_DKLEN: int=32
SCRYPT_N: int=2**20
SCRYPT_R: int=8
SCRYPT_P: int=1

DOWNLOAD_PATH: str=path_join(DB_PATH, 'BOX_DATA', 'DOWNLOADS')

AES_RETURN_SIZE: int=200000000
# ^ How much AES will read for one encryption/decryption
#   cycle. This amount of bytes will be yielded from
#   aes_decrypt or aes_decrypt function. You can increase this
#   constant if you have big amount of RAM. Default is 200 megabytes.
assert not AES_RETURN_SIZE % 16 and AES_RETURN_SIZE > 16 # Must be divisible by 16.